-
--ОБЩИЕ ДЛЯ ВСЕХ
#0
 * <текст>
  Символ '*' в начале строки означает комментарий. 
Вся строка игнорируется интерпретатором триггеров.
  !!!ВНИМАИНИЕ!!!
  Не используйте символ * с самого начала строки.
  Для написания комментариев с начала строки, вставляйте в начало строки 
 два пробела и два знака "*" а уже потом сам комментарий.
(все начинающееся с * стирается из файлов - это внутренняя проблема редактора) 
#0
dg_cast 'заклинание' цель
  Триггер в котором выполнилась эта команда вызовет колдование 'заклинания', 
причем таким образом, как будто персонаж в игре сам произнес это 'заклинание'. 
Если это триггер моба - моб в действительности произнесет данное 'заклинание', 
в противном случае (триггер предмета или комнаты) будет загружен специальный моб 
(которого вам создавать не нужно, он уже существует) для того чтобы произнести 
'заклинание', и сразу после этого будет уничтожен. Заклинания с групповыми аффектами 
не могут быть вызваны этой командой.
  Внимание! Пользуйтесь этой командой осторожно. Заклинания произносимые 
с помощью этой команды будут успешными даже в не_магических комнатах, 
а агрессивные заклинания будут успешными и в мирных комнатах.
  Название заклинания обязательно должно быть в апострофах.
#0
eval <переменная> <выражение>
  Эта команда вычисляет значение выражения и устанавливает значение 
переменной в результат. О том как производятся вычисления выражения смотрите 
в разделе Выражения.
  Пример: eval foobar 15 - 5 устанавливает переменную foobar в значение 10.
#0
break
  Прекращает выполнение switch блока. Смотри switch для более подробных объяснений.
#0
case <условие>
  Определяет группу команд внутри switch блока. (Смотри switch ниже.)
#0
default
  Используется в switch блоке. Определяет группу команд, которая будет выполнена 
если switch-выражение не совпало ни с одним case-условием. (Смотри switch ниже.)
#0
done
  Завершает switch или while блок.
#0
extract <переменная> <номер_слова> <текст>
  Устанавливает значение переменной (если такой не существует - создается новая) 
в слово номер номер_слова из текста. Имя переменной не заключается в %.
#0
if (<выражение1>)
...
elseif (выражение2)
...
else
...
end
  !!!ВНИМАНИЕ!!!  Выражение должно всегда заключаться в круглые скобки () 
  Команда if должна предшествовать командам elseif (необязательная команда), 
else (необязательная команда), и end.
  Если выражение1 является истиной, то выполняются все команды между if и следующим 
elseif, else или end. 
  Если выполнение команд остановилось на elseif или else - ищется следующая команда 
end и выполнение команд продолжается с этой точки. 
  Если выражение1 является ложью ищется следующая команда elseif, else или end. 
  Если встречается команда else - выполняются все команды следующие за else до команды end. 
  Если встречается команда elseif - проверяется значение выражения2. 
  Если выражение2 равняется истине - то выполняются все команды между elseif и следующим 
elseif, else или end и затем ищется конец блока - (end). 
  Если выражение2 является ложью ищется следующая команда elseif, else или end и тд. 
#0
halt
  Эта команда прекращает выполнение триггера. Триггер возвратит значение 1, если 
другое значение не было задано командой return
#0
return <значение>
  Return изменяет возвращаемое значение триггера. Значение возвращается после 
выполнения всех команд триггера, или при выполнении команд wait или halt. 
В отличие от большинства языков программирования, return не прекращает выполнение триггера.
#0
set переменная выражение
  Устанавливает значение переменной в выражение без вычисления значения выражения.

  Пример: set foobar 15 - 5 - Устанавливает значение переменной foobar в "15 - 5"
#0
switch <выражение>
case условие1
...
break
case условие2
...
break
case условие3
...
break
default
...
done

Switch начинает блок выбора по условию.
Среди условий (условие1, условие2, условие3 ...) ищется равное выражению.


Если такое найдено, то выполняется список команд между этой командой case и командой break или done. 
Если такого не найдено, то выполняется список команд между командами default и break или done. 

Пример: 
* Сначала выберем число между 1 и 3
eval number %random.3%
* Теперь произведем некоторые действия в зависимости от того, чему равно значение переменной number
switch %number%
case 3
say number равен трем
break
case 2
say number равен двум
break
default
say очевидно, что number равен одному
break
done

Обратите внимание, что только команда break прерывает выполнение списка команд. То есть, если например %number% будет равен 3-м, и мы не поставим команду break перед командой 'case 2', то команда 'say number равен двум' тоже будет отработана.
#0
unset <переменная>
  Уничтожает переменную если она существует.
#0
version
  Отсылает номер версии интерпретатора скриптов в лог МАДа.
#0
wait <продолжительность>
  Приостанавливает выполнение триггера на определенный промежуток времени. 
Если продолжительность - просто число, то пауза будет равна такому количеству 
так называемым игровым пульсам (примерно 0.1 секунды). Если за параметром 
продолжительность стоит символ 's' - пауза будет равна такому количеству секунд. 
Если за параметром продолжительность стоит символ 't' - пауза будет равна такому 
количеству игровых тиков. 
#0
wait until <время>
  См wait
  Если используется wait until - триггер будет приостановлен до времени. 
Время может задаваться в двух форматах: HH:MM или HHMM (14:30 или 1430). 
#0
while <выражение>
  Начинает блок цикла. Блок содержит серию команд, которые будут выполняться до тех 
пор, пока выражение не станет ложным. Блок заканчивается командой done.
#0
--- Нестандартные
#0
attach <vnum> <id>
  Назначить триггер с номером vnum мобу, пердмету или комнате с номером id.
Внимание! Не путать id с vnum.

  Нестандартно. Нужно крайне редко. Вместо этого лучше запоминать переменные.
  В случае необходимости применения проконсультироваться
#0
detach <vnum> <id>
  Убирает триггер с номером vnum с объекта (моба, предмета или комнаты) с номером id.

  Нестандартно. Нужно крайне редко. Вместо этого лучше запоминать переменные.
  В случае необходимости применения проконсультироваться
#0
global <переменная>
  Команда global делает переменную глобальной. Заметим, что эта переменная является 
глобальной только в рамках одного скрипта, в котором она была объявлена глобальной.

  Нестандартно.  Нужно крайне редко.
  В случае необходимости применения проконсультироваться
#0
context <значение>
  Меняет содержимое параметра context скрипта на значение 
(целое положительное число). Когда скрипт начинает работать, 
его context равен 0. Когда переменная объявляется глобальной, 
ее context будет установлен в значение параметра context скрипта. 
Для того чтобы глобальная переменная бала найдена при обращении к ней, 
необходимо чтобы ее context был равен 0 или текущему значению 
параметра context скрипта. Подробнее об этом параметре и примерах 
его использования смотрите в разделе Переменные.

  Нестандартно.  Нужно крайне редко.
  В случае необходимости применения проконсультироваться
#0
makeuid <переменная> <id>
  Создает новую переменную, которая идентифицирует игрока, моба или предмет с этим 
id-номером. Все поля этой переменной устанавливаются в значения соответствующие этому 
игроку, мобу или предмету.

  Нестандартно.  Нужно крайне редко.
  В случае необходимости применения проконсультироваться
#0
remote <переменная> <id>
  Копирует переменную в список глобальных переменных скрипта принадлежащего мобу, 
предмету или комнате с этим id.

  Нестандартно.  Нужно крайне редко.
  В случае необходимости применения проконсультироваться
$